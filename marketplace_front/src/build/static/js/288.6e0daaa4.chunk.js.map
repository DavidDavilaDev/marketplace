{"version":3,"file":"static/js/288.6e0daaa4.chunk.js","mappings":"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","sources":["../node_modules/@ionic/core/components/index3.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { G as GESTURE_CONTROLLER } from './gesture-controller.js';\nexport { G as GESTURE_CONTROLLER } from './gesture-controller.js';\n\nconst addEventListener = (el, // TODO(FW-2832): type\neventName, callback, opts) => {\n    // use event listener options when supported\n    // otherwise it's just a boolean for the \"capture\" arg\n    const listenerOpts = supportsPassive(el)\n        ? {\n            capture: !!opts.capture,\n            passive: !!opts.passive,\n        }\n        : !!opts.capture;\n    let add;\n    let remove;\n    if (el['__zone_symbol__addEventListener']) {\n        add = '__zone_symbol__addEventListener';\n        remove = '__zone_symbol__removeEventListener';\n    }\n    else {\n        add = 'addEventListener';\n        remove = 'removeEventListener';\n    }\n    el[add](eventName, callback, listenerOpts);\n    return () => {\n        el[remove](eventName, callback, listenerOpts);\n    };\n};\nconst supportsPassive = (node) => {\n    if (_sPassive === undefined) {\n        try {\n            const opts = Object.defineProperty({}, 'passive', {\n                get: () => {\n                    _sPassive = true;\n                },\n            });\n            node.addEventListener('optsTest', () => {\n                return;\n            }, opts);\n        }\n        catch (e) {\n            _sPassive = false;\n        }\n    }\n    return !!_sPassive;\n};\nlet _sPassive;\n\nconst MOUSE_WAIT = 2000;\n// TODO(FW-2832): types\nconst createPointerEvents = (el, pointerDown, pointerMove, pointerUp, options) => {\n    let rmTouchStart;\n    let rmTouchMove;\n    let rmTouchEnd;\n    let rmTouchCancel;\n    let rmMouseStart;\n    let rmMouseMove;\n    let rmMouseUp;\n    let lastTouchEvent = 0;\n    const handleTouchStart = (ev) => {\n        lastTouchEvent = Date.now() + MOUSE_WAIT;\n        if (!pointerDown(ev)) {\n            return;\n        }\n        if (!rmTouchMove && pointerMove) {\n            rmTouchMove = addEventListener(el, 'touchmove', pointerMove, options);\n        }\n        /**\n         * Events are dispatched on the element that is tapped and bubble up to\n         * the reference element in the gesture. In the event that the element this\n         * event was first dispatched on is removed from the DOM, the event will no\n         * longer bubble up to our reference element. This leaves the gesture in an\n         * unusable state. To account for this, the touchend and touchcancel listeners\n         * should be added to the event target so that they still fire even if the target\n         * is removed from the DOM.\n         */\n        if (!rmTouchEnd) {\n            rmTouchEnd = addEventListener(ev.target, 'touchend', handleTouchEnd, options);\n        }\n        if (!rmTouchCancel) {\n            rmTouchCancel = addEventListener(ev.target, 'touchcancel', handleTouchEnd, options);\n        }\n    };\n    const handleMouseDown = (ev) => {\n        if (lastTouchEvent > Date.now()) {\n            return;\n        }\n        if (!pointerDown(ev)) {\n            return;\n        }\n        if (!rmMouseMove && pointerMove) {\n            rmMouseMove = addEventListener(getDocument(el), 'mousemove', pointerMove, options);\n        }\n        if (!rmMouseUp) {\n            rmMouseUp = addEventListener(getDocument(el), 'mouseup', handleMouseUp, options);\n        }\n    };\n    const handleTouchEnd = (ev) => {\n        stopTouch();\n        if (pointerUp) {\n            pointerUp(ev);\n        }\n    };\n    const handleMouseUp = (ev) => {\n        stopMouse();\n        if (pointerUp) {\n            pointerUp(ev);\n        }\n    };\n    const stopTouch = () => {\n        if (rmTouchMove) {\n            rmTouchMove();\n        }\n        if (rmTouchEnd) {\n            rmTouchEnd();\n        }\n        if (rmTouchCancel) {\n            rmTouchCancel();\n        }\n        rmTouchMove = rmTouchEnd = rmTouchCancel = undefined;\n    };\n    const stopMouse = () => {\n        if (rmMouseMove) {\n            rmMouseMove();\n        }\n        if (rmMouseUp) {\n            rmMouseUp();\n        }\n        rmMouseMove = rmMouseUp = undefined;\n    };\n    const stop = () => {\n        stopTouch();\n        stopMouse();\n    };\n    const enable = (isEnabled = true) => {\n        if (!isEnabled) {\n            if (rmTouchStart) {\n                rmTouchStart();\n            }\n            if (rmMouseStart) {\n                rmMouseStart();\n            }\n            rmTouchStart = rmMouseStart = undefined;\n            stop();\n        }\n        else {\n            if (!rmTouchStart) {\n                rmTouchStart = addEventListener(el, 'touchstart', handleTouchStart, options);\n            }\n            if (!rmMouseStart) {\n                rmMouseStart = addEventListener(el, 'mousedown', handleMouseDown, options);\n            }\n        }\n    };\n    const destroy = () => {\n        enable(false);\n        pointerUp = pointerMove = pointerDown = undefined;\n    };\n    return {\n        enable,\n        stop,\n        destroy,\n    };\n};\nconst getDocument = (node) => {\n    return node instanceof Document ? node : node.ownerDocument;\n};\n\nconst createPanRecognizer = (direction, thresh, maxAngle) => {\n    const radians = maxAngle * (Math.PI / 180);\n    const isDirX = direction === 'x';\n    const maxCosine = Math.cos(radians);\n    const threshold = thresh * thresh;\n    let startX = 0;\n    let startY = 0;\n    let dirty = false;\n    let isPan = 0;\n    return {\n        start(x, y) {\n            startX = x;\n            startY = y;\n            isPan = 0;\n            dirty = true;\n        },\n        detect(x, y) {\n            if (!dirty) {\n                return false;\n            }\n            const deltaX = x - startX;\n            const deltaY = y - startY;\n            const distance = deltaX * deltaX + deltaY * deltaY;\n            if (distance < threshold) {\n                return false;\n            }\n            const hypotenuse = Math.sqrt(distance);\n            const cosine = (isDirX ? deltaX : deltaY) / hypotenuse;\n            if (cosine > maxCosine) {\n                isPan = 1;\n            }\n            else if (cosine < -maxCosine) {\n                isPan = -1;\n            }\n            else {\n                isPan = 0;\n            }\n            dirty = false;\n            return true;\n        },\n        isGesture() {\n            return isPan !== 0;\n        },\n        getDirection() {\n            return isPan;\n        },\n    };\n};\n\n// TODO(FW-2832): types\nconst createGesture = (config) => {\n    let hasCapturedPan = false;\n    let hasStartedPan = false;\n    let hasFiredStart = true;\n    let isMoveQueued = false;\n    const finalConfig = Object.assign({ disableScroll: false, direction: 'x', gesturePriority: 0, passive: true, maxAngle: 40, threshold: 10 }, config);\n    const canStart = finalConfig.canStart;\n    const onWillStart = finalConfig.onWillStart;\n    const onStart = finalConfig.onStart;\n    const onEnd = finalConfig.onEnd;\n    const notCaptured = finalConfig.notCaptured;\n    const onMove = finalConfig.onMove;\n    const threshold = finalConfig.threshold;\n    const passive = finalConfig.passive;\n    const blurOnStart = finalConfig.blurOnStart;\n    const detail = {\n        type: 'pan',\n        startX: 0,\n        startY: 0,\n        startTime: 0,\n        currentX: 0,\n        currentY: 0,\n        velocityX: 0,\n        velocityY: 0,\n        deltaX: 0,\n        deltaY: 0,\n        currentTime: 0,\n        event: undefined,\n        data: undefined,\n    };\n    const pan = createPanRecognizer(finalConfig.direction, finalConfig.threshold, finalConfig.maxAngle);\n    const gesture = GESTURE_CONTROLLER.createGesture({\n        name: config.gestureName,\n        priority: config.gesturePriority,\n        disableScroll: config.disableScroll,\n    });\n    const pointerDown = (ev) => {\n        const timeStamp = now(ev);\n        if (hasStartedPan || !hasFiredStart) {\n            return false;\n        }\n        updateDetail(ev, detail);\n        detail.startX = detail.currentX;\n        detail.startY = detail.currentY;\n        detail.startTime = detail.currentTime = timeStamp;\n        detail.velocityX = detail.velocityY = detail.deltaX = detail.deltaY = 0;\n        detail.event = ev;\n        // Check if gesture can start\n        if (canStart && canStart(detail) === false) {\n            return false;\n        }\n        // Release fallback\n        gesture.release();\n        // Start gesture\n        if (!gesture.start()) {\n            return false;\n        }\n        hasStartedPan = true;\n        if (threshold === 0) {\n            return tryToCapturePan();\n        }\n        pan.start(detail.startX, detail.startY);\n        return true;\n    };\n    const pointerMove = (ev) => {\n        // fast path, if gesture is currently captured\n        // do minimum job to get user-land even dispatched\n        if (hasCapturedPan) {\n            if (!isMoveQueued && hasFiredStart) {\n                isMoveQueued = true;\n                calcGestureData(detail, ev);\n                requestAnimationFrame(fireOnMove);\n            }\n            return;\n        }\n        // gesture is currently being detected\n        calcGestureData(detail, ev);\n        if (pan.detect(detail.currentX, detail.currentY)) {\n            if (!pan.isGesture() || !tryToCapturePan()) {\n                abortGesture();\n            }\n        }\n    };\n    const fireOnMove = () => {\n        // Since fireOnMove is called inside a RAF, onEnd() might be called,\n        // we must double check hasCapturedPan\n        if (!hasCapturedPan) {\n            return;\n        }\n        isMoveQueued = false;\n        if (onMove) {\n            onMove(detail);\n        }\n    };\n    const tryToCapturePan = () => {\n        if (!gesture.capture()) {\n            return false;\n        }\n        hasCapturedPan = true;\n        hasFiredStart = false;\n        // reset start position since the real user-land event starts here\n        // If the pan detector threshold is big, not resetting the start position\n        // will cause a jump in the animation equal to the detector threshold.\n        // the array of positions used to calculate the gesture velocity does not\n        // need to be cleaned, more points in the positions array always results in a\n        // more accurate value of the velocity.\n        detail.startX = detail.currentX;\n        detail.startY = detail.currentY;\n        detail.startTime = detail.currentTime;\n        if (onWillStart) {\n            onWillStart(detail).then(fireOnStart);\n        }\n        else {\n            fireOnStart();\n        }\n        return true;\n    };\n    const blurActiveElement = () => {\n        if (typeof document !== 'undefined') {\n            const activeElement = document.activeElement;\n            if (activeElement === null || activeElement === void 0 ? void 0 : activeElement.blur) {\n                activeElement.blur();\n            }\n        }\n    };\n    const fireOnStart = () => {\n        if (blurOnStart) {\n            blurActiveElement();\n        }\n        if (onStart) {\n            onStart(detail);\n        }\n        hasFiredStart = true;\n    };\n    const reset = () => {\n        hasCapturedPan = false;\n        hasStartedPan = false;\n        isMoveQueued = false;\n        hasFiredStart = true;\n        gesture.release();\n    };\n    // END *************************\n    const pointerUp = (ev) => {\n        const tmpHasCaptured = hasCapturedPan;\n        const tmpHasFiredStart = hasFiredStart;\n        reset();\n        if (!tmpHasFiredStart) {\n            return;\n        }\n        calcGestureData(detail, ev);\n        // Try to capture press\n        if (tmpHasCaptured) {\n            if (onEnd) {\n                onEnd(detail);\n            }\n            return;\n        }\n        // Not captured any event\n        if (notCaptured) {\n            notCaptured(detail);\n        }\n    };\n    const pointerEvents = createPointerEvents(finalConfig.el, pointerDown, pointerMove, pointerUp, {\n        capture: false,\n        passive,\n    });\n    const abortGesture = () => {\n        reset();\n        pointerEvents.stop();\n        if (notCaptured) {\n            notCaptured(detail);\n        }\n    };\n    return {\n        enable(enable = true) {\n            if (!enable) {\n                if (hasCapturedPan) {\n                    pointerUp(undefined);\n                }\n                reset();\n            }\n            pointerEvents.enable(enable);\n        },\n        destroy() {\n            gesture.destroy();\n            pointerEvents.destroy();\n        },\n    };\n};\nconst calcGestureData = (detail, ev) => {\n    if (!ev) {\n        return;\n    }\n    const prevX = detail.currentX;\n    const prevY = detail.currentY;\n    const prevT = detail.currentTime;\n    updateDetail(ev, detail);\n    const currentX = detail.currentX;\n    const currentY = detail.currentY;\n    const timestamp = (detail.currentTime = now(ev));\n    const timeDelta = timestamp - prevT;\n    if (timeDelta > 0 && timeDelta < 100) {\n        const velocityX = (currentX - prevX) / timeDelta;\n        const velocityY = (currentY - prevY) / timeDelta;\n        detail.velocityX = velocityX * 0.7 + detail.velocityX * 0.3;\n        detail.velocityY = velocityY * 0.7 + detail.velocityY * 0.3;\n    }\n    detail.deltaX = currentX - detail.startX;\n    detail.deltaY = currentY - detail.startY;\n    detail.event = ev;\n};\nconst updateDetail = (ev, detail) => {\n    // get X coordinates for either a mouse click\n    // or a touch depending on the given event\n    let x = 0;\n    let y = 0;\n    if (ev) {\n        const changedTouches = ev.changedTouches;\n        if (changedTouches && changedTouches.length > 0) {\n            const touch = changedTouches[0];\n            x = touch.clientX;\n            y = touch.clientY;\n        }\n        else if (ev.pageX !== undefined) {\n            x = ev.pageX;\n            y = ev.pageY;\n        }\n    }\n    detail.currentX = x;\n    detail.currentY = y;\n};\nconst now = (ev) => {\n    return ev.timeStamp || Date.now();\n};\n\nexport { createGesture };\n"],"names":["addEventListener","el","eventName","callback","opts","listenerOpts","supportsPassive","capture","passive","add","remove","node","undefined","_sPassive","Object","defineProperty","get","e","getDocument","Document","ownerDocument","createGesture","config","hasCapturedPan","hasStartedPan","hasFiredStart","isMoveQueued","finalConfig","assign","disableScroll","direction","gesturePriority","maxAngle","threshold","canStart","onWillStart","onStart","onEnd","notCaptured","onMove","blurOnStart","detail","type","startX","startY","startTime","currentX","currentY","velocityX","velocityY","deltaX","deltaY","currentTime","event","data","pan","createPanRecognizer","thresh","radians","Math","PI","isDirX","maxCosine","cos","dirty","isPan","start","x","y","detect","distance","hypotenuse","sqrt","cosine","isGesture","getDirection","gesture","GESTURE_CONTROLLER","name","gestureName","priority","fireOnMove","tryToCapturePan","then","fireOnStart","blurActiveElement","document","activeElement","blur","reset","release","pointerUp","ev","tmpHasCaptured","tmpHasFiredStart","calcGestureData","pointerEvents","createPointerEvents","pointerDown","pointerMove","options","rmTouchStart","rmTouchMove","rmTouchEnd","rmTouchCancel","rmMouseStart","rmMouseMove","rmMouseUp","lastTouchEvent","handleTouchStart","Date","now","target","handleTouchEnd","handleMouseDown","handleMouseUp","stopTouch","stopMouse","stop","enable","arguments","length","destroy","timeStamp","updateDetail","requestAnimationFrame","abortGesture","prevX","prevY","prevT","timeDelta","changedTouches","touch","clientX","clientY","pageX","pageY"],"sourceRoot":""}